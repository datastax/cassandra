--- a/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -185,11 +185,8 @@
 import static org.apache.cassandra.utils.FBUtilities.now;
 import static org.apache.cassandra.utils.Throwables.maybeFail;
 import static org.apache.cassandra.utils.Throwables.merge;
-<<<<<<<
-import static org.apache.cassandra.utils.Throwables.perform;
-=======
 import static org.apache.cassandra.utils.concurrent.CountDownLatch.newCountDownLatch;
->>>>>>>
+import static org.apache.cassandra.utils.Throwables.perform;
 
 public class ColumnFamilyStore implements ColumnFamilyStoreMBean, Memtable.Owner, SSTable.Owner
 {
@@ -1285,13 +1282,8 @@
                 }
                 catch (Throwable t)
                 {
-<<<<<<<
                     logger.error("Flushing {} failed with error", memtable.toString(), t);
-                    if (flushRunnables != null)
-                    {
-                        for (Memtable.FlushRunnable runnable : flushRunnables)
-                            t = runnable.abort(t);
-                    }
+                    t = Flushing.abortRunnables(flushRunnables, t);
 
                     // wait for any flush runnables that were submitted (after aborting they should complete immediately)
                     // this ensures that the writers are aborted by FlushRunnable.writeSortedContents(), in the worst
@@ -1303,13 +1295,8 @@
                     t = txn.abort(t);
 
                     // and re-throw
-                    throw Throwables.propagate(t);
-=======
-                    t = Flushing.abortRunnables(flushRunnables, t);
-                    t = txn.abort(t);
                     Throwables.throwIfUnchecked(t);
                     throw new RuntimeException(t);
->>>>>>>
                 }
 
                 try
--- a/src/java/org/apache/cassandra/io/util/SequentialWriter.java
+++ b/src/java/org/apache/cassandra/io/util/SequentialWriter.java
@@ -422,7 +422,6 @@
         return txnProxy.commit(accumulate);
     }
 
-<<<<<<<
     /**
      * Stop the operation after errors, i.e. close and release all held resources.
      *
@@ -430,9 +429,7 @@
      * This is thread-unsafe, releasing and cleaning the buffer while it is being written can have disastrous
      * consequences (e.g. SIGSEGV).
      */
-=======
     @Override
->>>>>>>
     public final Throwable abort(Throwable accumulate)
     {
         return txnProxy.abort(accumulate);
