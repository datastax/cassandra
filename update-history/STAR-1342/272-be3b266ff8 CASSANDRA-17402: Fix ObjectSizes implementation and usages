--- a/src/java/org/apache/cassandra/fql/FullQueryLogger.java
+++ b/src/java/org/apache/cassandra/fql/FullQueryLogger.java
@@ -387,27 +387,15 @@
                       2 * EMPTY_LIST_SIZE +      // queries + values lists
                       3 * OBJECT_REFERENCE_SIZE; // batchType and two lists references
 
-<<<<<<<
             for (String query : queries)
                 weight += ObjectSizes.sizeOf(checkNotNull(query)) + OBJECT_REFERENCE_SIZE;
-=======
-            for (int i = 0, queriesSize = queries.size(); i < queriesSize; i++)
-                weight += ObjectSizes.sizeOf(checkNotNull(queries.get(i))) + OBJECT_REFERENCE_SIZE;
->>>>>>>
 
-            for (int j = 0, valuesSize = values.size(); j < valuesSize; j++)
+            for (List<ByteBuffer> subValues : values)
             {
-<<<<<<<
-                List<ByteBuffer> subValues = checkNotNull(values.get(j));
-                weight += EMPTY_LIST_SIZE + OBJECT_REFERENCE_SIZE;
-                for (int i = 0, subValuesSize = subValues.size(); i < subValuesSize; i++)
-                    weight += ObjectSizes.sizeOnHeapOf(checkNotNull(subValues.get(i))) + OBJECT_REFERENCE_SIZE;
-=======
                 weight += EMPTY_LIST_SIZE + OBJECT_REFERENCE_SIZE;
 
                 for (ByteBuffer value : subValues)
                     weight += ObjectSizes.sizeOnHeapOf(value) + OBJECT_REFERENCE_SIZE;
->>>>>>>
             }
 
             this.weight = weight;
@@ -426,16 +414,19 @@
             wire.write(BATCH_TYPE).text(batchType.name());
             ValueOut valueOut = wire.write(QUERIES);
             valueOut.int32(queries.size());
-            for (int i = 0, queriesSize = queries.size(); i < queriesSize; i++)
-                valueOut.text(queries.get(i));
+            for (String query : queries)
+            {
+                valueOut.text(query);
+            }
             valueOut = wire.write(VALUES);
             valueOut.int32(values.size());
-            for (int i = 0, valuesSize = values.size(); i < valuesSize; i++)
+            for (List<ByteBuffer> subValues : values)
             {
-                List<ByteBuffer> subValues = values.get(i);
                 valueOut.int32(subValues.size());
-                for (int j = 0, subValuesSize = subValues.size(); j < subValuesSize; j++)
-                    valueOut.bytes(BytesStore.wrap(subValues.get(j)));
+                for (ByteBuffer value : subValues)
+                {
+                    valueOut.bytes(BytesStore.wrap(value));
+                }
             }
         }
 
--- a/src/java/org/apache/cassandra/utils/ObjectSizes.java
+++ b/src/java/org/apache/cassandra/utils/ObjectSizes.java
@@ -16,10 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-<<<<<<<
-=======
 
->>>>>>>
 package org.apache.cassandra.utils;
 
 import java.nio.ByteBuffer;
@@ -205,11 +202,7 @@
         if (str == null)
             return 0;
 
-<<<<<<<
         return EMPTY_STRING_SIZE + sizeOfArray(str.length(), Character.BYTES);
-=======
-        return EMPTY_STRING_SIZE + sizeOfArray(str.length(), Character.SIZE);
->>>>>>>
     }
 
     /**
diff --git a/src/java/org/apache/cassandra/fql/FullQueryLogger.java b/src/java/org/apache/cassandra/fql/FullQueryLogger.java
index 88307240a8..0604df67fb 100644
--- a/src/java/org/apache/cassandra/fql/FullQueryLogger.java
+++ b/src/java/org/apache/cassandra/fql/FullQueryLogger.java
@@ -390,7 +390,7 @@ public class FullQueryLogger implements QueryEvents.Listener
             for (String query : queries)
                 weight += ObjectSizes.sizeOf(checkNotNull(query)) + OBJECT_REFERENCE_SIZE;
 
-            for (int j = 0, valuesSize = values.size(); j < valuesSize; j++)
+            for (List<ByteBuffer> subValues : values)
             {
                 weight += EMPTY_LIST_SIZE + OBJECT_REFERENCE_SIZE;
 
@@ -414,16 +414,19 @@ public class FullQueryLogger implements QueryEvents.Listener
             wire.write(BATCH_TYPE).text(batchType.name());
             ValueOut valueOut = wire.write(QUERIES);
             valueOut.int32(queries.size());
-            for (int i = 0, queriesSize = queries.size(); i < queriesSize; i++)
-                valueOut.text(queries.get(i));
+            for (String query : queries)
+            {
+                valueOut.text(query);
+            }
             valueOut = wire.write(VALUES);
             valueOut.int32(values.size());
-            for (int i = 0, valuesSize = values.size(); i < valuesSize; i++)
+            for (List<ByteBuffer> subValues : values)
             {
-                List<ByteBuffer> subValues = values.get(i);
                 valueOut.int32(subValues.size());
-                for (int j = 0, subValuesSize = subValues.size(); j < subValuesSize; j++)
-                    valueOut.bytes(BytesStore.wrap(subValues.get(j)));
+                for (ByteBuffer value : subValues)
+                {
+                    valueOut.bytes(BytesStore.wrap(value));
+                }
             }
         }
 
diff --git a/test/unit/org/apache/cassandra/db/CellSpecTest.java b/test/unit/org/apache/cassandra/db/CellSpecTest.java
index 7d8b86f1b6..4cc886d958 100644
--- a/test/unit/org/apache/cassandra/db/CellSpecTest.java
+++ b/test/unit/org/apache/cassandra/db/CellSpecTest.java
@@ -39,7 +39,6 @@ import org.apache.cassandra.db.rows.CellPath;
 import org.apache.cassandra.db.rows.NativeCell;
 import org.apache.cassandra.schema.ColumnMetadata;
 import org.apache.cassandra.schema.TableMetadata;
-import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.ObjectSizes;
 import org.apache.cassandra.utils.UUIDGen;
 import org.apache.cassandra.utils.concurrent.OpOrder;
