--- a/src/java/org/apache/cassandra/repair/RepairMessageVerbHandler.java
+++ b/src/java/org/apache/cassandra/repair/RepairMessageVerbHandler.java
@@ -77,7 +77,6 @@
         {
             if (message.verb() == PREPARE_MSG)
             {
-<<<<<<<
                 PrepareMessage prepareMessage = (PrepareMessage) message.payload;
                 logger.debug("Preparing, {}", prepareMessage);
 
@@ -93,60 +92,6 @@
                 {
                     ColumnFamilyStore columnFamilyStore = ColumnFamilyStore.getIfExists(tableId);
                     if (columnFamilyStore == null)
-=======
-                case PREPARE_MSG:
-                    PrepareMessage prepareMessage = (PrepareMessage) message.payload;
-                    logger.debug("Preparing, {}", prepareMessage);
-
-                    if (!ActiveRepairService.verifyCompactionsPendingThreshold(prepareMessage.parentRepairSession, prepareMessage.previewKind))
-                    {
-                        // error is logged in verifyCompactionsPendingThreshold
-                        sendFailureResponse(message);
-                        return;
-                    }
-
-                    List<ColumnFamilyStore> columnFamilyStores = new ArrayList<>(prepareMessage.tableIds.size());
-                    for (TableId tableId : prepareMessage.tableIds)
-                    {
-                        ColumnFamilyStore columnFamilyStore = ColumnFamilyStore.getIfExists(tableId);
-                        if (columnFamilyStore == null)
-                        {
-                            logErrorAndSendFailureResponse(String.format("Table with id %s was dropped during prepare phase of repair",
-                                                                         tableId), message);
-                            return;
-                        }
-                        columnFamilyStores.add(columnFamilyStore);
-                    }
-                    ActiveRepairService.instance.registerParentRepairSession(prepareMessage.parentRepairSession,
-                                                                             message.from(),
-                                                                             columnFamilyStores,
-                                                                             prepareMessage.ranges,
-                                                                             prepareMessage.isIncremental,
-                                                                             prepareMessage.timestamp,
-                                                                             prepareMessage.isGlobal,
-                                                                             prepareMessage.previewKind);
-                    MessagingService.instance().send(message.emptyResponse(), message.from());
-                    break;
-
-                case SNAPSHOT_MSG:
-                    logger.debug("Snapshotting {}", desc);
-                    final ColumnFamilyStore cfs = ColumnFamilyStore.getIfExists(desc.keyspace, desc.columnFamily);
-                    if (cfs == null)
-                    {
-                        logErrorAndSendFailureResponse(String.format("Table %s.%s was dropped during snapshot phase of repair %s",
-                                                                     desc.keyspace, desc.columnFamily, desc.parentSessionId), message);
-                        return;
-                    }
-
-                    ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(desc.parentSessionId);
-                    prs.setHasSnapshots();
-                    TableRepairManager repairManager = cfs.getRepairManager();
-                    if (prs.isGlobal)
-                    {
-                        repairManager.snapshot(desc.parentSessionId.toString(), prs.getRanges(), false);
-                    }
-                    else
->>>>>>>
                     {
                         logErrorAndSendFailureResponse(String.format("Table with id %s was dropped during prepare phase of repair",
                                                                      tableId), message);
@@ -176,18 +121,19 @@
                 }
 
                 ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(desc.parentSessionId);
-                TableRepairManager repairManager = cfs.getRepairManager();
-                if (prs.isGlobal)
-                {
-                    repairManager.snapshot(desc.parentSessionId.toString(), prs.getRanges(), false);
-                }
-                else
-                {
-                    repairManager.snapshot(desc.parentSessionId.toString(), desc.ranges, true);
-                }
-                logger.debug("Enqueuing response to snapshot request {} to {}", desc.sessionId, message.from());
-                MessagingService.instance().send(message.emptyResponse(), message.from());
-            }
+                prs.setHasSnapshots();
+                    TableRepairManager repairManager = cfs.getRepairManager();
+                    if (prs.isGlobal)
+                    {
+                        repairManager.snapshot(desc.parentSessionId.toString(), prs.getRanges(), false);
+                    }
+                    else
+                    {
+                        repairManager.snapshot(desc.parentSessionId.toString(), desc.ranges, true);
+                    }
+                    logger.debug("Enqueuing response to snapshot request {} to {}", desc.sessionId, message.from());
+                    MessagingService.instance().send(message.emptyResponse(), message.from());
+                    }
             else if (message.verb() == VALIDATION_REQ)
             {
                 ValidationRequest validationRequest = (ValidationRequest) message.payload;
