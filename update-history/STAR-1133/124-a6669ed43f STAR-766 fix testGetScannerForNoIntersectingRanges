--- a/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java
+++ b/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java
@@ -98,10 +98,7 @@
     public static final String CF_STANDARD = "Standard1";
     public static final String CF_STANDARD2 = "Standard2";
     public static final String CF_STANDARD3 = "Standard3";
-<<<<<<<
-=======
     public static final String CF_MOVE_AND_OPEN = "MoveAndOpen";
->>>>>>>
     public static final String CF_COMPRESSED = "Compressed";
     public static final String CF_INDEXED = "Indexed1";
     public static final String CF_STANDARD_LOW_INDEX_INTERVAL = "StandardLowIndexInterval";
@@ -126,10 +123,7 @@
                                                 .minIndexInterval(8)
                                                 .maxIndexInterval(8),  // ensure close key count estimation
                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD3),
-<<<<<<<
-=======
                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_MOVE_AND_OPEN),
->>>>>>>
                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_COMPRESSED).compression(CompressionParams.DEFAULT),
                                     SchemaLoader.compositeIndexCFMD(KEYSPACE1, CF_INDEXED, true),
                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD_LOW_INDEX_INTERVAL)
@@ -666,12 +660,8 @@
     @Test
     public void testGetScannerForNoIntersectingRanges() throws Exception
     {
-<<<<<<<
-        ColumnFamilyStore store = discardSSTables(KEYSPACE1, CF_STANDARD);
-=======
         Keyspace keyspace = Keyspace.open(KEYSPACE1);
         ColumnFamilyStore store = keyspace.getColumnFamilyStore(CF_STANDARD3);
->>>>>>>
         partitioner = store.getPartitioner();
 
         new RowUpdateBuilder(store.metadata(), 0, "k1")
@@ -680,8 +670,7 @@
             .build()
             .applyUnsafe();
 
-<<<<<<<
-        store.forceBlockingFlush(ColumnFamilyStore.FlushReason.UNIT_TESTS);
+        store.forceBlockingFlush(UNIT_TESTS);
 
         Set<SSTableReader> liveSSTables = store.getLiveSSTables();
         assertEquals("The table should have only one sstable", 1, liveSSTables.size());
@@ -691,22 +680,6 @@
             assertThat(scanner, instanceOf(BigTableScanner.EmptySSTableScanner.class));
         else
             assertThat(scanner, instanceOf(TrieIndexScanner.EmptySSTableScanner.class));
-=======
-        store.forceBlockingFlush(UNIT_TESTS);
-        boolean foundScanner = false;
-        for (SSTableReader s : store.getLiveSSTables())
-        {
-            try (ISSTableScanner scanner = s.getScanner(new Range<>(t(0), t(1))))
-            {
-                if (scanner.hasNext())
-                {
-                    scanner.next(); // throws exception pre 5407
-                    foundScanner = true;
-                }
-            }
-        }
-        assertTrue(foundScanner);
->>>>>>>
     }
 
     @Test
