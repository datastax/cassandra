--- a/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -2432,18 +2432,13 @@
         final long truncatedAt;
         final CommitLogPosition replayAfter;
 
-<<<<<<<
         // This is a no-op on local storage, but on remote storage where compaction runs offline, this
         // ensures that any live sstables created by the compaction process before it was interrupted,
         // will actually be obsoleted by one of the writers - since all writers must be running for
         // a truncate to run, then at least one writer per token range will load sstables created by compaction
         storageHandler.reloadSSTables(StorageHandler.ReloadReason.TRUNCATION);
 
-        if ((keyspace.getMetadata().params.durableWrites && !memtableWritesAreDurable())  // need to clear dirty regions
-            || snapshot) // need sstable for snapshot
-=======
         if (!noSnapshot && ((keyspace.getMetadata().params.durableWrites && !memtableWritesAreDurable()) || DatabaseDescriptor.isAutoSnapshot()))
->>>>>>>
         {
             replayAfter = forceBlockingFlush(FlushReason.TRUNCATE);
             viewManager.forceBlockingFlush(FlushReason.TRUNCATE);
--- a/src/java/org/apache/cassandra/db/lifecycle/LogFile.java
+++ b/src/java/org/apache/cassandra/db/lifecycle/LogFile.java
@@ -324,25 +324,13 @@
         assert type == Type.ADD || type == Type.REMOVE;
 
         for (SSTableReader sstable : tables)
-<<<<<<<
             maybeCreateReplica(sstable);
-=======
-        {
-            File directory = sstable.descriptor.directory;
-            replicas.maybeCreateReplica(directory, getFileName(), records);
-        }
->>>>>>>
         return LogRecord.make(type, tables);
     }
 
     private LogRecord makeAddRecord(SSTable table)
     {
-<<<<<<<
-        File directory = table.descriptor.directory;
-        replicas.maybeCreateReplica(directory, getFileName(), records);
-=======
         maybeCreateReplica(table);
->>>>>>>
         return LogRecord.make(Type.ADD, table);
     }
 
@@ -358,17 +346,10 @@
         return record.asType(type);
     }
 
-<<<<<<<
-        File directory = table.descriptor.directory;
-        replicas.maybeCreateReplica(directory, getFileName(), records);
-        return record.asType(type);
-=======
     private void maybeCreateReplica(SSTable sstable)
     {
         File directory = sstable.descriptor.directory;
-        String fileName = StringUtils.join(directory, File.pathSeparator(), getFileName());
-        replicas.maybeCreateReplica(directory, fileName, onDiskRecords);
->>>>>>>
+        replicas.maybeCreateReplica(directory, getFileName(), onDiskRecords);
     }
 
     void addRecord(LogRecord record)
--- a/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -1787,15 +1787,10 @@
                                          QueryInfoTracker.ReadTracker readTracker)
     throws UnavailableException, IsBootstrappingException, ReadFailureException, ReadTimeoutException, InvalidRequestException
     {
-<<<<<<<
         ClientRequestsMetrics metrics = ClientRequestsMetricsProvider.instance.metrics(group.metadata().keyspace);
-        if (StorageService.instance.isBootstrapMode() && !systemKeyspaceQuery(group.queries))
-=======
-        CoordinatorClientRequestMetrics metrics = CoordinatorClientRequestMetricsProvider.instance.metrics(group.metadata().keyspace);
         ColumnFamilyStore cfs = Keyspace.openAndGetStore(group.metadata());
 
         if (!cfs.isReadyToServeData() && !systemKeyspaceQuery(group.queries))
->>>>>>>
         {
             metrics.readMetrics.unavailables.mark();
             metrics.readMetricsForLevel(consistencyLevel).unavailables.mark();
--- a/test/unit/org/apache/cassandra/db/ScrubTest.java
+++ b/test/unit/org/apache/cassandra/db/ScrubTest.java
@@ -562,11 +562,7 @@
         overrideWithGarbage(sstable.getDataFile(), startPosition, endPosition, junk);
     }
 
-<<<<<<<
-    private static void overrideWithGarbage(String path, long startPosition, long endPosition, byte junk) throws IOException
-=======
-    private void overrideWithGarbage(File path, long startPosition, long endPosition, byte junk) throws IOException
->>>>>>>
+    private static void overrideWithGarbage(File path, long startPosition, long endPosition, byte junk) throws IOException
     {
         try (RandomAccessFile file = new RandomAccessFile(path.toJavaIOFile(), "rw"))
         {
--- a/test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java
+++ b/test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java
@@ -30,6 +30,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.TimeUnit;
 import java.util.function.BiConsumer;
 import java.util.function.Consumer;
 import java.util.stream.Collectors;
@@ -37,9 +38,12 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Sets;
+import com.google.common.util.concurrent.Runnables;
+import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+import org.apache.cassandra.concurrent.ScheduledExecutors;
 import org.apache.cassandra.db.ColumnFamilyStore;
 import org.apache.cassandra.db.Directories;
 import org.apache.cassandra.db.SerializationHeader;
@@ -59,18 +63,13 @@
 import org.apache.cassandra.schema.MockSchema;
 import org.apache.cassandra.schema.TableMetadataRef;
 import org.apache.cassandra.utils.AlwaysPresentFilter;
+import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.concurrent.AbstractTransactionalTest;
 import org.apache.cassandra.utils.concurrent.Transactional;
 import org.mockito.Mockito;
 
-<<<<<<<
-import static junit.framework.Assert.assertNotNull;
-import static junit.framework.Assert.assertNull;
-import static junit.framework.Assert.fail;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
-=======
 import static org.junit.Assert.assertArrayEquals;
->>>>>>>
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -269,7 +268,7 @@
         sstable1.selfRef().release();
         sstable2.selfRef().release();
         Thread.sleep(1);
-        LogTransaction.waitForDeletions();
+        FBUtilities.waitOnFuture(ScheduledExecutors.nonPeriodicTasks.schedule(Runnables.doNothing(), 0, TimeUnit.MILLISECONDS));
     }
 
     @Test
@@ -564,15 +563,8 @@
         Arrays.stream(sstables).forEach(s -> s.selfRef().release());
 
         // test listing
-<<<<<<<
-        Assert.assertEquals(getAllFilePaths(sstables[0]), getTemporaryFiles(dataFolder1));
-        Assert.assertEquals(getAllFilePaths(sstables[2]), getTemporaryFiles(dataFolder2));
-=======
-        assertEquals(sstables[0].getAllFilePaths().stream().map(File::new).collect(Collectors.toSet()),
-                            getTemporaryFiles(dataFolder1));
-        assertEquals(sstables[2].getAllFilePaths().stream().map(File::new).collect(Collectors.toSet()),
-                            getTemporaryFiles(dataFolder2));
->>>>>>>
+        assertEquals(getAllFilePaths(sstables[0]), getTemporaryFiles(dataFolder1));
+        assertEquals(getAllFilePaths(sstables[2]), getTemporaryFiles(dataFolder2));
 
         // normally called at startup
         assertTrue(LifecycleTransaction.removeUnfinishedLeftovers(Arrays.asList(dataFolder1, dataFolder2)));
@@ -620,15 +612,8 @@
         Arrays.stream(sstables).forEach(s -> s.selfRef().release());
 
         // test listing
-<<<<<<<
-        Assert.assertEquals(getAllFilePaths(sstables[1]), getTemporaryFiles(dataFolder1));
-        Assert.assertEquals(getAllFilePaths(sstables[3]), getTemporaryFiles(dataFolder2));
-=======
-        assertEquals(sstables[1].getAllFilePaths().stream().map(File::new).collect(Collectors.toSet()),
-                            getTemporaryFiles(dataFolder1));
-        assertEquals(sstables[3].getAllFilePaths().stream().map(File::new).collect(Collectors.toSet()),
-                            getTemporaryFiles(dataFolder2));
->>>>>>>
+        assertEquals(getAllFilePaths(sstables[1]), getTemporaryFiles(dataFolder1));
+        assertEquals(getAllFilePaths(sstables[3]), getTemporaryFiles(dataFolder2));
 
         // normally called at startup
         assertTrue(LifecycleTransaction.removeUnfinishedLeftovers(Arrays.asList(dataFolder1, dataFolder2)));
--- a/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java
+++ b/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java
@@ -91,8 +91,6 @@
     }
 
     @Test
-<<<<<<<
-=======
     public void testRegularMode() throws ConfigurationException
     {
         for (File path : DatabaseDescriptor.getAllDataFileLocations())
@@ -103,7 +101,6 @@
     }
 
     @Test
->>>>>>>
     public void testGetAllRangesEmpty()
     {
         List<Token> toks = Collections.emptyList();
diff --git a/src/java/org/apache/cassandra/db/commitlog/CommitLog.java b/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
index 2445e7c722..dfe89570fc 100644
--- a/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
+++ b/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
@@ -500,7 +500,7 @@ public class CommitLog implements CommitLogMBean
 
     public static long freeDiskSpace()
     {
-        return PathUtils.tryGetSpace(new File(DatabaseDescriptor.getCommitLogLocation()).toPath(), FileStore::getUsableSpace) - DatabaseDescriptor.getMinFreeSpacePerDriveInBytes();
+        return PathUtils.tryGetSpace(DatabaseDescriptor.getCommitLogLocation().toPath(), FileStore::getUsableSpace) - DatabaseDescriptor.getMinFreeSpacePerDriveInBytes();
     }
 
     @VisibleForTesting
diff --git a/test/unit/org/apache/cassandra/db/SnapshotTest.java b/test/unit/org/apache/cassandra/db/SnapshotTest.java
index 93a615649a..f0ca551b41 100644
--- a/test/unit/org/apache/cassandra/db/SnapshotTest.java
+++ b/test/unit/org/apache/cassandra/db/SnapshotTest.java
@@ -18,7 +18,6 @@
 
 package org.apache.cassandra.db;
 
-import java.io.File;
 import java.nio.file.Files;
 import java.nio.file.StandardOpenOption;
 
@@ -27,6 +26,7 @@ import org.junit.Test;
 import org.apache.cassandra.cql3.CQLTester;
 import org.apache.cassandra.io.sstable.Component;
 import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.io.util.File;
 
 import static org.apache.cassandra.db.ColumnFamilyStore.FlushReason.UNIT_TESTS;
 
@@ -40,7 +40,7 @@ public class SnapshotTest extends CQLTester
         getCurrentColumnFamilyStore().forceBlockingFlush(UNIT_TESTS);
         for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())
         {
-            File toc = new File(sstable.descriptor.filenameFor(Component.TOC));
+            File toc = sstable.descriptor.fileFor(Component.TOC);
             Files.write(toc.toPath(), new byte[0], StandardOpenOption.TRUNCATE_EXISTING);
         }
         getCurrentColumnFamilyStore().snapshot("hello");
diff --git a/test/unit/org/apache/cassandra/db/compaction/CompactionTaskTest.java b/test/unit/org/apache/cassandra/db/compaction/CompactionTaskTest.java
index 28378fdb70..af611c053c 100644
--- a/test/unit/org/apache/cassandra/db/compaction/CompactionTaskTest.java
+++ b/test/unit/org/apache/cassandra/db/compaction/CompactionTaskTest.java
@@ -222,7 +222,7 @@ public class CompactionTaskTest
         Set<SSTableReader> sstables = cfs.getLiveSSTables();
         Assert.assertEquals(4, sstables.size());
 
-        Tracker tracker = Tracker.newDummyTracker();
+        Tracker tracker = Tracker.newDummyTracker(cfs.metadata);
         tracker.addInitialSSTables(sstables);
         tracker.apply(updateCompacting(Collections.emptySet(), sstables));
         try (LifecycleTransaction txn = new LifecycleTransaction(tracker, OperationType.COMPACTION, sstables))
diff --git a/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java b/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java
index f861a770ae..c100e94222 100644
--- a/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java
+++ b/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java
@@ -882,7 +882,7 @@ public class LeveledCompactionStrategyTest
         List<SSTableReader> l0sstables = new ArrayList<>();
         for (int i = 10; i < 20; i++)
             l0sstables.add(MockSchema.sstable(i, (i + 1) * 1024 * 1024, cfs));
-        try (LifecycleTransaction txn = LifecycleTransaction.offline(OperationType.COMPACTION, Iterables.concat(l0sstables, l1sstables)))
+        try (LifecycleTransaction txn = LifecycleTransaction.offline(OperationType.COMPACTION, cfs.metadata, Iterables.concat(l0sstables, l1sstables)))
         {
             Set<SSTableReader> nonExpired = Sets.difference(txn.originals(), Collections.emptySet());
             CompactionTask task = new LeveledCompactionTask(cfs, txn, 1, 0, 1024*1024, false, null);
@@ -927,7 +927,7 @@ public class LeveledCompactionStrategyTest
         for (int i = 10; i < 20; i++)
             l0sstables.add(MockSchema.sstable(i, (i + 1) * 1024 * 1024, cfs));
 
-        try (LifecycleTransaction txn = LifecycleTransaction.offline(OperationType.COMPACTION, l0sstables))
+        try (LifecycleTransaction txn = LifecycleTransaction.offline(OperationType.COMPACTION, cfs.metadata, l0sstables))
         {
             CompactionTask task = new LeveledCompactionTask(cfs, txn, 0, 0, 1024*1024, false, null);
 
@@ -977,7 +977,7 @@ public class LeveledCompactionStrategyTest
             sstable.reloadSSTableMetadata();
             sstables.add(sstable);
         }
-        try (LifecycleTransaction txn = LifecycleTransaction.offline(OperationType.COMPACTION, sstables))
+        try (LifecycleTransaction txn = LifecycleTransaction.offline(OperationType.COMPACTION, cfs.metadata, sstables))
         {
             CompactionTask task = new LeveledCompactionTask(cfs, txn, 0, 0, 1024 * 1024, false, null);
             assertFalse(task.reduceScopeForLimitedSpace(Sets.newHashSet(sstables), 0));
diff --git a/test/unit/org/apache/cassandra/db/compaction/writers/CompactionAwareWriterTest.java b/test/unit/org/apache/cassandra/db/compaction/writers/CompactionAwareWriterTest.java
index b64b404702..474591acbf 100644
--- a/test/unit/org/apache/cassandra/db/compaction/writers/CompactionAwareWriterTest.java
+++ b/test/unit/org/apache/cassandra/db/compaction/writers/CompactionAwareWriterTest.java
@@ -183,7 +183,7 @@ public class CompactionAwareWriterTest extends CQLTester
             sstables.add(MockSchema.sstable(i, 1000, getCurrentColumnFamilyStore()));
 
         Directories dirs = new Directories(getCurrentColumnFamilyStore().metadata(), dataDirs);
-        LifecycleTransaction txn = LifecycleTransaction.offline(OperationType.COMPACTION, sstables);
+        LifecycleTransaction txn = LifecycleTransaction.offline(OperationType.COMPACTION, getColumnFamilyStore().metadata, sstables);
         CompactionAwareWriter writer = new MaxSSTableSizeWriter(getCurrentColumnFamilyStore(), dirs, txn, sstables, 2000, 1);
         // init case
         writer.maybeSwitchWriter(null);
diff --git a/test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java b/test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java
index 2de60c4622..3fb809054a 100644
--- a/test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java
+++ b/test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java
@@ -30,6 +30,7 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.TimeUnit;
 import java.util.function.BiConsumer;
 import java.util.function.Consumer;
 import java.util.stream.Collectors;
@@ -37,9 +38,12 @@ import java.util.stream.Collectors;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Sets;
+import com.google.common.util.concurrent.Runnables;
+import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+import org.apache.cassandra.concurrent.ScheduledExecutors;
 import org.apache.cassandra.db.ColumnFamilyStore;
 import org.apache.cassandra.db.Directories;
 import org.apache.cassandra.db.SerializationHeader;
@@ -59,6 +63,7 @@ import org.apache.cassandra.io.util.FileUtils;
 import org.apache.cassandra.schema.MockSchema;
 import org.apache.cassandra.schema.TableMetadataRef;
 import org.apache.cassandra.utils.AlwaysPresentFilter;
+import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.concurrent.AbstractTransactionalTest;
 import org.apache.cassandra.utils.concurrent.Transactional;
 import org.mockito.Mockito;
@@ -263,7 +268,7 @@ public class LogTransactionTest extends AbstractTransactionalTest
         sstable1.selfRef().release();
         sstable2.selfRef().release();
         Thread.sleep(1);
-        LogTransaction.waitForDeletions();
+        FBUtilities.waitOnFuture(ScheduledExecutors.nonPeriodicTasks.schedule(Runnables.doNothing(), 0, TimeUnit.MILLISECONDS));
     }
 
     @Test
diff --git a/test/unit/org/apache/cassandra/service/StorageServiceServerM3PTest.java b/test/unit/org/apache/cassandra/service/StorageServiceServerM3PTest.java
index 69b064232b..8d46930f7d 100644
--- a/test/unit/org/apache/cassandra/service/StorageServiceServerM3PTest.java
+++ b/test/unit/org/apache/cassandra/service/StorageServiceServerM3PTest.java
@@ -18,8 +18,6 @@
 
 package org.apache.cassandra.service;
 
-import java.io.File;
-
 import org.junit.BeforeClass;
 import org.junit.Test;
 
@@ -28,6 +26,7 @@ import org.apache.cassandra.db.Keyspace;
 import org.apache.cassandra.db.commitlog.CommitLog;
 import org.apache.cassandra.exceptions.ConfigurationException;
 import org.apache.cassandra.gms.Gossiper;
+import org.apache.cassandra.io.util.File;
 import org.apache.cassandra.locator.IEndpointSnitch;
 import org.apache.cassandra.locator.PropertyFileSnitch;
 
@@ -54,10 +53,10 @@ public class StorageServiceServerM3PTest
         mkdirs();
         cleanup();
         StorageService.instance.initServer(0);
-        for (String path : DatabaseDescriptor.getAllDataFileLocations())
+        for (File file : DatabaseDescriptor.getAllDataFileLocations())
         {
             // verify that storage directories are there.
-            assertTrue(new File(path).exists());
+            assertTrue(file.exists());
         }
         // a proper test would be to call decommission here, but decommission() mixes both shutdown and datatransfer
         // calls.  This test is only interested in the shutdown-related items which a properly handled by just
diff --git a/test/unit/org/apache/cassandra/tools/StandaloneVerifierOnSSTablesTest.java b/test/unit/org/apache/cassandra/tools/StandaloneVerifierOnSSTablesTest.java
index 6026ebde5c..d57ec723af 100644
--- a/test/unit/org/apache/cassandra/tools/StandaloneVerifierOnSSTablesTest.java
+++ b/test/unit/org/apache/cassandra/tools/StandaloneVerifierOnSSTablesTest.java
@@ -132,7 +132,7 @@ public class StandaloneVerifierOnSSTablesTest extends OfflineToolUtils
         String corruptStatsTable = "corruptStatsTable";
         createAndPopulateTable(keyspaceName, corruptStatsTable, cfs -> {
             SSTableReader sstable = cfs.getLiveSSTables().iterator().next();
-            try (RandomAccessFile file = new RandomAccessFile(sstable.descriptor.filenameFor(Component.STATS), "rw"))
+            try (RandomAccessFile file = new RandomAccessFile(sstable.descriptor.fileFor(Component.STATS).toJavaIOFile(), "rw"))
             {
                 file.seek(0);
                 file.writeBytes(StringUtils.repeat('z', 2));
