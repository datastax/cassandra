--- a/test/unit/org/apache/cassandra/db/lifecycle/LogReplicationSetTest.java
+++ b/test/unit/org/apache/cassandra/db/lifecycle/LogReplicationSetTest.java
@@ -39,12 +39,8 @@
         replicas.addReplicas(spyFiles);
         spyFiles.forEach(f -> Mockito.when(f.exists()).thenThrow(new RuntimeException()));
 
-<<<<<<<
         Assertions.assertThatExceptionOfType(RuntimeException.class)
                   .isThrownBy(() -> replicas.append(LogRecord.makeAbort(System.currentTimeMillis())));
-=======
-        assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> replicas.append(LogRecord.makeAbort(System.currentTimeMillis())));
->>>>>>>
     }
 
     @Test
--- a/test/unit/org/apache/cassandra/service/QueryPagerTest.java
+++ b/test/unit/org/apache/cassandra/service/QueryPagerTest.java
@@ -20,53 +20,25 @@
 
 import java.nio.ByteBuffer;
 import java.nio.charset.CharacterCodingException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.SortedSet;
+import java.util.*;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import org.junit.After;
 import org.junit.BeforeClass;
 import org.junit.Test;
-<<<<<<<
-=======
-import org.junit.runner.RunWith;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
->>>>>>>
 
-import org.apache.cassandra.OrderedJUnit4ClassRunner;
-import org.apache.cassandra.SchemaLoader;
-import org.apache.cassandra.Util;
+import org.apache.cassandra.*;
 import org.apache.cassandra.cql3.ColumnIdentifier;
 import org.apache.cassandra.cql3.PageSize;
+import org.apache.cassandra.cql3.QueryProcessor;
 import org.apache.cassandra.cql3.statements.schema.CreateTableStatement;
-import org.apache.cassandra.db.AbstractReadCommandBuilder;
-import org.apache.cassandra.db.Clustering;
-import org.apache.cassandra.db.ColumnFamilyStore;
-import org.apache.cassandra.db.DecoratedKey;
-import org.apache.cassandra.db.Keyspace;
-import org.apache.cassandra.db.PartitionRangeReadQuery;
-import org.apache.cassandra.db.ReadCommand;
-import org.apache.cassandra.db.ReadExecutionController;
-import org.apache.cassandra.db.ReadQuery;
-import org.apache.cassandra.db.RowUpdateBuilder;
-import org.apache.cassandra.db.SinglePartitionReadCommand;
+import org.apache.cassandra.db.*;
 import org.apache.cassandra.db.SinglePartitionReadCommand.Group;
-import org.apache.cassandra.db.SinglePartitionReadQuery;
-import org.apache.cassandra.db.Slice;
-import org.apache.cassandra.db.Slices;
-import org.apache.cassandra.db.filter.ClusteringIndexFilter;
-import org.apache.cassandra.db.filter.ClusteringIndexSliceFilter;
-import org.apache.cassandra.db.filter.ColumnFilter;
-import org.apache.cassandra.db.filter.DataLimits;
-import org.apache.cassandra.db.filter.RowFilter;
+import org.apache.cassandra.db.filter.*;
 import org.apache.cassandra.db.marshal.Int32Type;
 import org.apache.cassandra.db.partitions.FilteredPartition;
 import org.apache.cassandra.db.partitions.PartitionIterator;
@@ -175,6 +147,12 @@
         tokenOrderedKeys = Lists.newArrayList(tokens);
     }
 
+    @After
+    public void cleanUp()
+    {
+        QueryProcessor.executeInternal(String.format("TRUNCATE \"%s\".\"%s\"", KEYSPACE_CQL, CF_CQL_WITH_STATIC));
+    }
+
     private static ColumnFamilyStore cfs(String ks, String cf)
     {
         return Keyspace.open(ks).getColumnFamilyStore(cf);
@@ -911,7 +889,7 @@
                     Row row = partition.next();
                     int cellIndex = !reversed ? i : 4 - i;
 
-                    assertEquals(row.clustering().bufferAt(0), ByteBufferUtil.bytes(""+cellIndex));
+                    assertEquals(string(row.clustering().bufferAt(0)), ""+cellIndex);
                     assertCell(row, table.getColumn(new ColumnIdentifier("v1", false)), cellIndex);
                     assertCell(row, table.getColumn(new ColumnIdentifier("v2", false)), cellIndex);
 
diff --git a/src/java/org/apache/cassandra/cql3/statements/DescribeStatement.java b/src/java/org/apache/cassandra/cql3/statements/DescribeStatement.java
index db78df5095..3e3b8cf938 100644
--- a/src/java/org/apache/cassandra/cql3/statements/DescribeStatement.java
+++ b/src/java/org/apache/cassandra/cql3/statements/DescribeStatement.java
@@ -37,7 +37,6 @@ import org.apache.cassandra.db.marshal.MapType;
 import org.apache.cassandra.db.marshal.UTF8Type;
 import org.apache.cassandra.db.virtual.VirtualKeyspaceRegistry;
 import org.apache.cassandra.exceptions.InvalidRequestException;
-import org.apache.cassandra.exceptions.OperationExecutionException;
 import org.apache.cassandra.exceptions.RequestExecutionException;
 import org.apache.cassandra.exceptions.RequestValidationException;
 import org.apache.cassandra.io.util.DataInputBuffer;
@@ -161,7 +160,7 @@ public abstract class DescribeStatement<T> extends CQLStatement.Raw implements C
         PageSize pageSize = options.getPageSize();
 
         if (pageSize.isDefined() && pageSize.getUnit() != PageSize.PageUnit.ROWS)
-            throw new OperationExecutionException("Paging in bytes is not supported for describe statement. Please specify the page size in rows.");
+            throw new InvalidRequestException("Paging in bytes is not supported for describe statement. Please specify the page size in rows.");
 
         Stream<? extends T> stream = describe(state.getClientState(), keyspaces);
 
diff --git a/src/java/org/apache/cassandra/service/pager/AggregationQueryPager.java b/src/java/org/apache/cassandra/service/pager/AggregationQueryPager.java
index 414b0800d3..0298a7056d 100644
--- a/src/java/org/apache/cassandra/service/pager/AggregationQueryPager.java
+++ b/src/java/org/apache/cassandra/service/pager/AggregationQueryPager.java
@@ -25,6 +25,7 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.cql3.PageSize;
+import org.apache.cassandra.exceptions.InvalidRequestException;
 import org.apache.cassandra.exceptions.OperationExecutionException;
 import org.apache.cassandra.schema.TableMetadata;
 import org.apache.cassandra.db.*;
@@ -82,7 +83,7 @@ public final class AggregationQueryPager implements QueryPager
                                        long queryStartNanoTime) throws OperationExecutionException
     {
         if (pageSize.isDefined() && pageSize.getUnit() != PageSize.PageUnit.ROWS)
-            throw new OperationExecutionException("Paging in bytes is not supported for aggregation queries. Please specify the page size in rows.");
+            throw new InvalidRequestException("Paging in bytes is not supported for aggregation queries. Please specify the page size in rows.");
 
         if (limits.isGroupByLimit())
             return new GroupByPartitionIterator(pageSize, subPageSize, consistency, queryState, queryStartNanoTime);
@@ -106,7 +107,7 @@ public final class AggregationQueryPager implements QueryPager
     public PartitionIterator fetchPageInternal(PageSize pageSize, ReadExecutionController executionController)
     {
         if (pageSize.isDefined() && pageSize.getUnit() != PageSize.PageUnit.ROWS)
-            throw new OperationExecutionException("Paging in bytes is not supported for aggregation queries. Please specify the page size in rows.");
+            throw new InvalidRequestException("Paging in bytes is not supported for aggregation queries. Please specify the page size in rows.");
 
         if (limits.isGroupByLimit())
             return new GroupByPartitionIterator(pageSize, subPageSize, executionController, System.nanoTime());
diff --git a/test/unit/org/apache/cassandra/cql3/PagingQueryTest.java b/test/unit/org/apache/cassandra/cql3/PagingQueryTest.java
index 8b469a60d2..0bf326d600 100644
--- a/test/unit/org/apache/cassandra/cql3/PagingQueryTest.java
+++ b/test/unit/org/apache/cassandra/cql3/PagingQueryTest.java
@@ -42,7 +42,9 @@ import org.apache.cassandra.db.ConsistencyLevel;
 import org.apache.cassandra.db.ReadExecutionController;
 import org.apache.cassandra.db.ReadQuery;
 import org.apache.cassandra.db.partitions.PartitionIterator;
+import org.apache.cassandra.exceptions.InvalidRequestException;
 import org.apache.cassandra.exceptions.OperationExecutionException;
+import org.apache.cassandra.schema.Schema;
 import org.apache.cassandra.service.QueryState;
 import org.apache.cassandra.service.pager.AggregationQueryPager;
 import org.apache.cassandra.service.pager.QueryPager;
@@ -238,7 +240,7 @@ public class PagingQueryTest extends CQLTester
             assertThat(count).isEqualTo(expectedCount);
             assertThat(pager.isExhausted()).isTrue();
         }
-        catch (OperationExecutionException ex)
+        catch (InvalidRequestException ex)
         {
             if (pager instanceof AggregationQueryPager && requestedPageSize.getUnit() == PageSize.PageUnit.BYTES)
                 return null;
@@ -260,7 +262,7 @@ public class PagingQueryTest extends CQLTester
     {
         String table = generateData(genPartitions, genClusterings, genClusterings2);
 
-        flush(true);
+        flush(KEYSPACE, table);
         Supplier<Pair<QueryPager, SelectStatement>> pagerSupplier;
         query = String.format(query, KEYSPACE + '.' + table);
         int selected = selPartitions * selClusterings;
@@ -377,7 +379,7 @@ public class PagingQueryTest extends CQLTester
     {
         String table = generateData(genPartitions, genClusterings, genClusterings2);
 
-        flush(true);
+        flush(KEYSPACE, table);
         Supplier<Pair<QueryPager, SelectStatement>> pagerSupplier;
         query = String.format(query, KEYSPACE + '.' + table);
 
@@ -388,19 +390,24 @@ public class PagingQueryTest extends CQLTester
 
     private String generateData(int genPartitions, int genClusterings, int genClusterings2) throws Throwable
     {
-        String table = createTable("CREATE TABLE %s (k INT, c INT, c2 INT, v INT, PRIMARY KEY (k, c, c2))");
+        String table = String.format("table_%d_%d_%d", genPartitions, genClusterings, genClusterings2);
+        if (Schema.instance.getTableMetadata(KEYSPACE, table) != null)
+            return table;
+
+        QueryProcessor.executeInternal(String.format("CREATE TABLE %s.%s (k INT, c INT, c2 INT, v INT, PRIMARY KEY (k, c, c2))", KEYSPACE, table));
         for (int k = 0; k < genPartitions; k++)
         {
             for (int c = 0; c < genClusterings; c++)
             {
                 for (int c2 = 0; c2 < genClusterings2; c2++)
                 {
-                    execute("INSERT INTO %s (k, c, c2, v) VALUES (?, ?, ?, ?)", k, c, c2, 1);
+                    execute(String.format("INSERT INTO %s.%s (k, c, c2, v) VALUES (?, ?, ?, ?)", KEYSPACE, table), k, c, c2, 1);
                     if ((k * genClusterings + c) % (3 * (genClusterings + genPartitions) / 2) == 0)
-                        flush(true);
+                        flush(KEYSPACE, table);
                 }
             }
         }
+
         return table;
     }
 
@@ -538,7 +545,6 @@ public class PagingQueryTest extends CQLTester
         testPagingCasesWithAggregateEverything("SELECT COUNT(*) FROM %s WHERE c > 2 AND c <= 7 AND k = 5", 10, 10, 10, 50);
     }
 
-
     private static String someText()
     {
         char[] arr = new char[1024];
diff --git a/test/unit/org/apache/cassandra/service/QueryPagerTest.java b/test/unit/org/apache/cassandra/service/QueryPagerTest.java
index 1537414375..9cfbf29a51 100644
--- a/test/unit/org/apache/cassandra/service/QueryPagerTest.java
+++ b/test/unit/org/apache/cassandra/service/QueryPagerTest.java
@@ -25,6 +25,7 @@ import java.util.*;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import org.junit.After;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.slf4j.Logger;
@@ -33,8 +34,10 @@ import org.slf4j.LoggerFactory;
 import org.apache.cassandra.*;
 import org.apache.cassandra.cql3.ColumnIdentifier;
 import org.apache.cassandra.cql3.PageSize;
+import org.apache.cassandra.cql3.QueryProcessor;
 import org.apache.cassandra.cql3.statements.schema.CreateTableStatement;
 import org.apache.cassandra.db.*;
+import org.apache.cassandra.db.SinglePartitionReadCommand.Group;
 import org.apache.cassandra.db.filter.*;
 import org.apache.cassandra.db.marshal.Int32Type;
 import org.apache.cassandra.db.partitions.FilteredPartition;
@@ -144,6 +147,12 @@ public class QueryPagerTest
         tokenOrderedKeys = Lists.newArrayList(tokens);
     }
 
+    @After
+    public void cleanUp()
+    {
+        QueryProcessor.executeInternal(String.format("TRUNCATE \"%s\".\"%s\"", KEYSPACE_CQL, CF_CQL_WITH_STATIC));
+    }
+
     private static ColumnFamilyStore cfs(String ks, String cf)
     {
         return Keyspace.open(ks).getColumnFamilyStore(cf);
@@ -880,7 +889,7 @@ public class QueryPagerTest
                     Row row = partition.next();
                     int cellIndex = !reversed ? i : 4 - i;
 
-                    assertEquals(row.clustering().bufferAt(0), ByteBufferUtil.bytes(""+cellIndex));
+                    assertEquals(string(row.clustering().bufferAt(0)), ""+cellIndex);
                     assertCell(row, table.getColumn(new ColumnIdentifier("v1", false)), cellIndex);
                     assertCell(row, table.getColumn(new ColumnIdentifier("v2", false)), cellIndex);
 
