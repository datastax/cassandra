--- a/test/unit/org/apache/cassandra/auth/FunctionResourceTest.java
+++ b/test/unit/org/apache/cassandra/auth/FunctionResourceTest.java
@@ -15,10 +15,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-<<<<<<<
-=======
 
->>>>>>>
 package org.apache.cassandra.auth;
 
 import java.util.ArrayList;
@@ -88,50 +85,27 @@
         FunctionResource actual = FunctionResource.fromName(String.format("%s/%s/%s[]", func, ks, name));
         assertEquals(expected, actual);
         assertEquals(expected.getKeyspace(), actual.getKeyspace());
-<<<<<<<
-=======
 
         String error = "functions/fr_ks/concat is not a valid function resource name. It must end with \"[]\"";
-        assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> FunctionResource.fromName(String.format("%s/%s/%s",
-                                                                                                                           func,
-                                                                                                                           ks,
-                                                                                                                           name)))
+        assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> FunctionResource.fromName(String.format("%s/%s/%s",func,ks,name)))
                                                                  .withMessage(error);
->>>>>>>
     }
 
     @Test
     public void testInvalidFunctionName()
     {
         String expected = "functions_test is not a valid function resource name";
-<<<<<<<
         assertThatExceptionOfType(IllegalArgumentException.class)
             .describedAs(expected)
             .isThrownBy(() -> FunctionResource.fromName("functions_test"));
-=======
-        assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> FunctionResource.fromName("functions_test"))
-                                                                 .withMessage(expected);
->>>>>>>
     }
 
     @Test
     public void testFunctionWithInvalidInput()
     {
         String expected = String.format("%s/%s/%s[%s]/test is not a valid function resource name", func, ks, name, varType);
-<<<<<<<
         assertThatExceptionOfType(IllegalArgumentException.class)
             .describedAs(expected)
             .isThrownBy(() -> FunctionResource.fromName(String.format("%s/%s/%s[%s]/test", func, ks, name, varType)));
     }
-}
-=======
-        assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> FunctionResource.fromName(String.format("%s/%s/%s[%s]/test",
-                                                                                                                           func,
-                                                                                                                           ks,
-                                                                                                                           name,
-                                                                                                                           varType)))
-                                                                 .withMessage(expected);
-        ;
-    }
-}
->>>>>>>
+}
\ No newline at end of file
