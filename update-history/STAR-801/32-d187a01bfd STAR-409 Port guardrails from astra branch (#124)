diff --git a/src/java/org/apache/cassandra/db/ConsistencyLevel.java b/src/java/org/apache/cassandra/db/ConsistencyLevel.java
index 3708f21a40..2f02665c30 100644
--- a/src/java/org/apache/cassandra/db/ConsistencyLevel.java
+++ b/src/java/org/apache/cassandra/db/ConsistencyLevel.java
@@ -230,7 +230,7 @@ public enum ConsistencyLevel
     }
 
     // This is the same than validateForWrite really, but we include a slightly different error message for SERIAL/LOCAL_SERIAL
-    public void validateForCasCommit(AbstractReplicationStrategy replicationStrategy) throws InvalidRequestException
+    public void validateForCasCommit(AbstractReplicationStrategy replicationStrategy, String keyspaceName) throws InvalidRequestException
     {
         if (SchemaConstants.isUserKeyspace(keyspaceName))
             Guardrails.disallowedWriteConsistencies.ensureAllowed(this);
diff --git a/src/java/org/apache/cassandra/service/StorageProxy.java b/src/java/org/apache/cassandra/service/StorageProxy.java
index 2b7de2ef15..361b57fc7a 100644
--- a/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -290,7 +290,7 @@ public class StorageProxy implements StorageProxyMBean
         {
             TableMetadata metadata = Schema.instance.validateTable(keyspaceName, cfName);
             consistencyForPaxos.validateForCas(keyspaceName);
-            consistencyForCommit.validateForCasCommit(keyspaceName);
+            consistencyForCommit.validateForCasCommit(Keyspace.open(keyspaceName).getReplicationStrategy(), keyspaceName);
 
             Supplier<Pair<PartitionUpdate, RowIterator>> updateProposer = () ->
             {
@@ -437,8 +437,8 @@ public class StorageProxy implements StorageProxyMBean
         try
         {
             consistencyForPaxos.validateForCas(metadata.keyspace);
-            consistencyForReplayCommits.validateForCasCommit(latestRs);
-            consistencyForCommit.validateForCasCommit(latestRs);
+            consistencyForReplayCommits.validateForCasCommit(latestRs, metadata.keyspace);
+            consistencyForCommit.validateForCasCommit(latestRs, metadata.keyspace);
 
             long timeoutNanos = DatabaseDescriptor.getCasContentionTimeout(NANOSECONDS);
             while (System.nanoTime() - queryStartNanoTime < timeoutNanos)
diff --git a/test/unit/org/apache/cassandra/cql3/ViewFilteringClustering1Test.java b/test/unit/org/apache/cassandra/cql3/ViewFilteringClustering1Test.java
index 6d4e4874bc..f721883e17 100644
--- a/test/unit/org/apache/cassandra/cql3/ViewFilteringClustering1Test.java
+++ b/test/unit/org/apache/cassandra/cql3/ViewFilteringClustering1Test.java
@@ -84,9 +84,9 @@ public class ViewFilteringClustering1Test extends CQLTester
         ViewFilteringTest.createView(name, query, views, version, this);
     }
 
-    private void dropView(String name) throws Throwable
+    private void dropMaterializedView(String name) throws Throwable
     {
-        ViewFilteringTest.dropView(name, views, version, this);
+        ViewFilteringTest.dropMaterializedView(name, views, version, this);
     }
 
     @Test
@@ -193,7 +193,7 @@ public class ViewFilteringClustering1Test extends CQLTester
                                     row(0, 1, 1, 0)
             );
 
-            dropView("mv_test" + i);
+            dropMaterializedView("mv_test" + i);
             dropTable("DROP TABLE %s");
         }
     }
@@ -301,7 +301,7 @@ public class ViewFilteringClustering1Test extends CQLTester
                                     row(0, 1, 1, 0)
             );
 
-            dropView("mv_test" + i);
+            dropMaterializedView("mv_test" + i);
             dropTable("DROP TABLE %s");
         }
     }
@@ -418,7 +418,7 @@ public class ViewFilteringClustering1Test extends CQLTester
                                     row(0, 1, 1, 0)
             );
 
-            dropView("mv_test" + i);
+            dropMaterializedView("mv_test" + i);
             dropTable("DROP TABLE %s");
         }
     }
diff --git a/test/unit/org/apache/cassandra/cql3/ViewFilteringClustering2Test.java b/test/unit/org/apache/cassandra/cql3/ViewFilteringClustering2Test.java
index d1ba842036..d6abdd9805 100644
--- a/test/unit/org/apache/cassandra/cql3/ViewFilteringClustering2Test.java
+++ b/test/unit/org/apache/cassandra/cql3/ViewFilteringClustering2Test.java
@@ -84,9 +84,9 @@ public class ViewFilteringClustering2Test extends CQLTester
         ViewFilteringTest.createView(name, query, views, version, this);
     }
 
-    private void dropView(String name) throws Throwable
+    private void dropMaterializedView(String name) throws Throwable
     {
-        ViewFilteringTest.dropView(name, views, version, this);
+        ViewFilteringTest.dropMaterializedView(name, views, version, this);
     }
 
     @Test
@@ -197,7 +197,7 @@ public class ViewFilteringClustering2Test extends CQLTester
                                     row(0, 1, 1, 0)
             );
 
-            dropView("mv_test" + i);
+            dropMaterializedView("mv_test" + i);
             dropTable("DROP TABLE %s");
         }
     }
@@ -322,7 +322,7 @@ public class ViewFilteringClustering2Test extends CQLTester
                                     row(4, 4, 1, 1)
             );
 
-            dropView("mv_test" + i);
+            dropMaterializedView("mv_test" + i);
             dropTable("DROP TABLE %s");
         }
     }
diff --git a/test/unit/org/apache/cassandra/cql3/ViewFilteringPKTest.java b/test/unit/org/apache/cassandra/cql3/ViewFilteringPKTest.java
index 09d220d3ce..d4d246aade 100644
--- a/test/unit/org/apache/cassandra/cql3/ViewFilteringPKTest.java
+++ b/test/unit/org/apache/cassandra/cql3/ViewFilteringPKTest.java
@@ -84,9 +84,9 @@ public class ViewFilteringPKTest extends CQLTester
         ViewFilteringTest.createView(name, query, views, version, this);
     }
 
-    private void dropView(String name) throws Throwable
+    private void dropMaterializedView(String name) throws Throwable
     {
-        ViewFilteringTest.dropView(name, views, version, this);
+        ViewFilteringTest.dropMaterializedView(name, views, version, this);
     }
 
     @Test
@@ -650,7 +650,7 @@ public class ViewFilteringPKTest extends CQLTester
             execute("DELETE FROM %s WHERE a = ?", 1);
             assertEmpty(execute("SELECT a, b, c, d FROM mv_test" + i));
 
-            dropView("mv_test" + i);
+            dropMaterializedView("mv_test" + i);
             dropTable("DROP TABLE %s");
         }
     }
diff --git a/test/unit/org/apache/cassandra/cql3/ViewFilteringTest.java b/test/unit/org/apache/cassandra/cql3/ViewFilteringTest.java
index 2d4cbb65ab..1b818c9d16 100644
--- a/test/unit/org/apache/cassandra/cql3/ViewFilteringTest.java
+++ b/test/unit/org/apache/cassandra/cql3/ViewFilteringTest.java
@@ -134,12 +134,12 @@ public class ViewFilteringTest extends CQLTester
         }
     }
 
-    private void dropView(String name) throws Throwable
+    private void dropMaterializedView(String name) throws Throwable
     {
-        dropView(name, views, version, this);
+        dropMaterializedView(name, views, version, this);
     }
 
-    public static void dropView(String name, List<String> views, ProtocolVersion version, CQLTester tester) throws Throwable
+    public static void dropMaterializedView(String name, List<String> views, ProtocolVersion version, CQLTester tester) throws Throwable
     {
         tester.executeNet(version, "DROP MATERIALIZED VIEW " + name);
         views.remove(name);
@@ -365,12 +365,12 @@ public class ViewFilteringTest extends CQLTester
         assertRowCount(execute("SELECT * FROM mv_test5"), 0);
         assertRowCount(execute("SELECT * FROM mv_test6"), 0);
 
-        dropView("mv_test1");
-        dropView("mv_test2");
-        dropView("mv_test3");
-        dropView("mv_test4");
-        dropView("mv_test5");
-        dropView("mv_test6");
+        dropMaterializedView("mv_test1");
+        dropMaterializedView("mv_test2");
+        dropMaterializedView("mv_test3");
+        dropMaterializedView("mv_test4");
+        dropMaterializedView("mv_test5");
+        dropMaterializedView("mv_test6");
         dropTable("DROP TABLE %s");
     }
 
@@ -757,7 +757,7 @@ public class ViewFilteringTest extends CQLTester
 
         try {
             createView("mv_test", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a IS NOT NULL AND b IS NOT NULL AND c IS NOT NULL AND d = 1 PRIMARY KEY (a, b, c)");
-            dropView("mv_test");
+            dropMaterializedView("mv_test");
         } catch(Exception e) {
             throw new RuntimeException("MV creation with non primary column restrictions failed.", e);
         }
@@ -862,7 +862,7 @@ public class ViewFilteringTest extends CQLTester
                                 row(0, 1, 1, 0)
         );
 
-        dropView("mv_test");
+        dropMaterializedView("mv_test");
         dropTable("DROP TABLE %s");
     }
 
