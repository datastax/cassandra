--- a/src/java/org/apache/cassandra/db/compaction/LeveledManifest.java
+++ b/src/java/org/apache/cassandra/db/compaction/LeveledManifest.java
@@ -272,15 +272,10 @@
                 continue; // mostly this just avoids polluting the debug log with zero scores
             // we want to calculate score excluding compacting ones
             Set<SSTableReader> sstablesInLevel = Sets.newHashSet(sstables);
-<<<<<<<
             Set<SSTableReader> remaining = Sets.difference(sstablesInLevel, cfs.getCompactingSSTables());
-            double score = (double) SSTableReader.getTotalBytes(remaining) / (double)maxBytesForLevel(i, maxSSTableSizeInBytes);
-=======
-            Set<SSTableReader> remaining = Sets.difference(sstablesInLevel, cfs.getTracker().getCompacting());
             long remainingBytesForLevel = SSTableReader.getTotalBytes(remaining);
             long maxBytesForLevel = maxBytesForLevel(i, maxSSTableSizeInBytes);
             double score = (double) remainingBytesForLevel / (double) maxBytesForLevel;
->>>>>>>
             logger.trace("Compaction score for level {} is {}", i, score);
 
             if (score > 1.001)
--- a/test/unit/org/apache/cassandra/db/compaction/TimeWindowCompactionStrategyTest.java
+++ b/test/unit/org/apache/cassandra/db/compaction/TimeWindowCompactionStrategyTest.java
@@ -139,38 +139,19 @@
     {
         long tstamp1 = 1451001601000L; // 2015-12-25 @ 00:00:01, in milliseconds
         long tstamp2 = 1451088001000L; // 2015-12-26 @ 00:00:01, in milliseconds
-<<<<<<<
-        Long lowHour = 1451001600000L; // 2015-12-25 @ 00:00:00, in milliseconds
-
-        // A 1 hour window should round down to the beginning of the hour
-        assertEquals(0, getWindowBoundsInMillis(TimeUnit.HOURS, 1, tstamp1).left.compareTo(lowHour));
-
-        // A 1 minute window should round down to the beginning of the hour
-        assertEquals(0, getWindowBoundsInMillis(TimeUnit.MINUTES, 1, tstamp1).left.compareTo(lowHour));
-
-        // A 1 day window should round down to the beginning of the hour
-        assertEquals(0, getWindowBoundsInMillis(TimeUnit.DAYS, 1, tstamp1).left.compareTo(lowHour));
-
-        // The 2 day window of 2015-12-25 + 2015-12-26 should round down to the beginning of 2015-12-25
-        assertEquals(0, getWindowBoundsInMillis(TimeUnit.DAYS, 2, tstamp2).left.compareTo(lowHour));
-=======
         long lowHour = 1451001600000L; // 2015-12-25 @ 00:00:00, in milliseconds
 
         // A 1 hour window should round down to the beginning of the hour
-        assertTrue(getWindowBoundsInMillis(HOURS, 1, tstamp1) == lowHour);
+        assertEquals(lowHour, getWindowBoundsInMillis(HOURS, 1, tstamp1));
 
         // A 1 minute window should round down to the beginning of the hour
-        assertTrue(getWindowBoundsInMillis(TimeUnit.MINUTES, 1, tstamp1) == lowHour);
+        assertEquals(lowHour, getWindowBoundsInMillis(TimeUnit.MINUTES, 1, tstamp1));
 
         // A 1 day window should round down to the beginning of the hour
-        assertTrue(getWindowBoundsInMillis(TimeUnit.DAYS, 1, tstamp1) == lowHour);
+        assertEquals(lowHour, getWindowBoundsInMillis(TimeUnit.DAYS, 1, tstamp1));
 
         // The 2 day window of 2015-12-25 + 2015-12-26 should round down to the beginning of 2015-12-25
-        assertTrue(getWindowBoundsInMillis(TimeUnit.DAYS, 2, tstamp2) == lowHour);
-
-
-        return;
->>>>>>>
+        assertEquals(lowHour, getWindowBoundsInMillis(TimeUnit.DAYS, 2, tstamp2));
     }
 
     @Test
@@ -214,20 +195,6 @@
         // We'll put 3 sstables into the newest bucket
         for (int i = 0; i < 3; i++)
         {
-<<<<<<<
-            Pair<Long, Long> bounds = getWindowBoundsInMillis(TimeUnit.HOURS, 1, tstamp);
-            buckets.put(bounds.left, sstrs.get(i));
-        }
-
-        TimeWindowCompactionStrategy.NewestBucket newBucket = newestBucket(buckets, 4, 32, new SizeTieredCompactionStrategyOptions(), getWindowBoundsInMillis(TimeUnit.HOURS, 1, System.currentTimeMillis()).left);
-        assertTrue("incoming bucket should not be accepted when it has below the min threshold SSTables", newBucket.sstables.isEmpty());
-        assertEquals("there should be no estimated remaining tasks when bucket is below min threshold SSTables", 0, newBucket.estimatedRemainingTasks);
-
-
-        newBucket = newestBucket(buckets, 2, 32, new SizeTieredCompactionStrategyOptions(), getWindowBoundsInMillis(TimeUnit.HOURS, 1, System.currentTimeMillis()).left);
-        assertFalse("incoming bucket should be accepted when it is larger than the min threshold SSTables", newBucket.sstables.isEmpty());
-        assertEquals("there should be one estimated remaining task when bucket is larger than the min threshold SSTables", 1, newBucket.estimatedRemainingTasks);
-=======
             TimeWindowCompactionStrategy.addToBuckets(buckets, sstrs.get(i), tstamp, TimeUnit.HOURS, 1);
         }
 
@@ -240,17 +207,11 @@
         compactions = toCompactions(aggregates);
         assertFalse("There should be one selected compaction when bucket is larger than the min but smaller than max threshold", CompactionAggregate.getSelected(aggregates).isEmpty());
         assertEquals("There should be one compaction when bucket is larger than the min but smaller than max threshold", 1,  compactions.size());
->>>>>>>
 
         // And 2 into the second bucket (1 hour back)
         for (int i = 3; i < 5; i++)
         {
-<<<<<<<
-            Pair<Long, Long> bounds = getWindowBoundsInMillis(TimeUnit.HOURS, 1, tstamp2);
-            buckets.put(bounds.left, sstrs.get(i));
-=======
             TimeWindowCompactionStrategy.addToBuckets(buckets, sstrs.get(i), tstamp2, TimeUnit.HOURS, 1);
->>>>>>>
         }
 
         assertEquals("an sstable with a single value should have equal min/max timestamps", sstrs.get(0).getMinTimestamp(), sstrs.get(0).getMaxTimestamp());
@@ -275,21 +236,12 @@
         sstrs = new ArrayList<>(cfs.getLiveSSTables());
         for (int i = 0; i < 40; i++)
         {
-<<<<<<<
-            Pair<Long, Long> bounds = getWindowBoundsInMillis(TimeUnit.HOURS, 1, sstrs.get(i).getMaxTimestamp());
-            buckets.put(bounds.left, sstrs.get(i));
-        }
-
-        newBucket = newestBucket(buckets, 4, 32, new SizeTieredCompactionStrategyOptions(), getWindowBoundsInMillis(TimeUnit.HOURS, 1, System.currentTimeMillis()).left);
-        assertEquals("new bucket should be trimmed to max threshold of 32", newBucket.sstables.size(), 32);
-=======
             TimeWindowCompactionStrategy.addToBuckets(buckets, sstrs.get(i), sstrs.get(i).getMaxTimestamp(), TimeUnit.HOURS, 1);
         }
 
         aggregates = getBucketAggregates(buckets, 4, 32, new SizeTieredCompactionStrategyOptions(), getWindowBoundsInMillis(HOURS, 1, System.currentTimeMillis()));
         compactions = toCompactions(aggregates);
         assertEquals("new bucket should be split by max threshold of 32", buckets.keySet().size() + 1, compactions.size());
->>>>>>>
 
         CompactionPick selected = CompactionAggregate.getSelected(aggregates);
         assertEquals("first pick should be trimmed to max threshold of 32", 32, selected.sstables.size());
diff --git a/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java b/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java
index 64cf161a31..dfdda303e1 100644
--- a/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java
+++ b/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java
@@ -848,7 +848,7 @@ public class LeveledCompactionStrategyTest
 
         // compaction for L8 sstables is not supposed to be run because there is no upper level to promote sstables
         // that's why we expect compaction candidates for L7 only
-        Collection<SSTableReader> compactionCandidates = lm.getCompactionCandidates().sstables;
+        Collection<SSTableReader> compactionCandidates = lm.getCompactionCandidate().sstables;
         assertThat(compactionCandidates).containsAll(sstablesOnL7);
         assertThat(compactionCandidates).doesNotContainAnyElementsOf(sstablesOnL8);
     }
