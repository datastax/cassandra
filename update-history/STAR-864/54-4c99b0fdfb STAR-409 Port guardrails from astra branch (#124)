--- a/conf/cassandra.yaml
+++ b/conf/cassandra.yaml
@@ -1435,7 +1435,10 @@
 # Transient replication is experimental and is not recommended for production use.
 enable_transient_replication: false
 
-<<<<<<<
+# Enables the used of 'ALTER ... DROP COMPACT STORAGE' statements on this node.
+# 'ALTER ... DROP COMPACT STORAGE' is considered experimental and is not recommended for production use.
+enable_drop_compact_storage: false
+
 # Apply database-as-a-service defaults.
 #
 # When enabled, some guardrails defaults are modified to values that are appropriate for cloud environments.
@@ -1537,9 +1540,4 @@
 
   # Warning threshold to warn when encountering more elements in collection than threshold.
   # Default: -1 to disable, may differ if apply_dbaas_defaults is enabled
-  # items_per_collection_warn_threshold: -1
-=======
-# Enables the used of 'ALTER ... DROP COMPACT STORAGE' statements on this node.
-# 'ALTER ... DROP COMPACT STORAGE' is considered experimental and is not recommended for production use.
-enable_drop_compact_storage: false
->>>>>>>
+  # items_per_collection_warn_threshold: -1
\ No newline at end of file
--- a/test/unit/org/apache/cassandra/cql3/CQLTester.java
+++ b/test/unit/org/apache/cassandra/cql3/CQLTester.java
@@ -29,7 +29,6 @@
 import java.rmi.server.RMISocketFactory;
 import java.util.*;
 import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.ExecutionException;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
@@ -72,35 +71,21 @@
 import org.apache.cassandra.locator.TokenMetadata;
 import org.apache.cassandra.metrics.ClientMetrics;
 import org.apache.cassandra.schema.*;
-import org.apache.cassandra.audit.AuditLogManager;
 import org.apache.cassandra.auth.CassandraAuthorizer;
 import org.apache.cassandra.auth.CassandraRoleManager;
 import org.apache.cassandra.auth.PasswordAuthenticator;
-import org.apache.cassandra.concurrent.ScheduledExecutors;
 import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.config.EncryptionOptions;
 import org.apache.cassandra.cql3.functions.FunctionName;
 import org.apache.cassandra.db.*;
 import org.apache.cassandra.db.marshal.*;
 import org.apache.cassandra.db.marshal.TupleType;
-import org.apache.cassandra.db.virtual.VirtualKeyspaceRegistry;
-import org.apache.cassandra.db.virtual.VirtualSchemaKeyspace;
 import org.apache.cassandra.dht.Murmur3Partitioner;
 import org.apache.cassandra.exceptions.ConfigurationException;
 import org.apache.cassandra.exceptions.SyntaxException;
-import org.apache.cassandra.index.SecondaryIndexManager;
 import org.apache.cassandra.io.util.FileUtils;
-import org.apache.cassandra.locator.AbstractEndpointSnitch;
-import org.apache.cassandra.locator.InetAddressAndPort;
-import org.apache.cassandra.locator.Replica;
-import org.apache.cassandra.locator.TokenMetadata;
-import org.apache.cassandra.metrics.ClientMetrics;
-import org.apache.cassandra.schema.*;
 import org.apache.cassandra.schema.IndexMetadata;
 import org.apache.cassandra.schema.KeyspaceMetadata;
 import org.apache.cassandra.schema.TableMetadata;
-import org.apache.cassandra.security.ThreadAwareSecurityManager;
-import org.apache.cassandra.serializers.MarshalException;
 import org.apache.cassandra.serializers.TypeSerializer;
 import org.apache.cassandra.service.ClientState;
 import org.apache.cassandra.service.QueryState;
@@ -455,7 +440,12 @@
         return allArgs;
     }
 
-<<<<<<<
+    protected static void requireNetworkWithoutDriver()
+    {
+        startServices();
+        startServer(server -> {});
+    }
+
     protected static void requireAuthentication()
     {
         System.setProperty("cassandra.superuser_setup_delay_ms", "-1");
@@ -463,12 +453,6 @@
         DatabaseDescriptor.setAuthenticator(new PasswordAuthenticator());
         DatabaseDescriptor.setRoleManager(new CassandraRoleManager());
         DatabaseDescriptor.setAuthorizer(new CassandraAuthorizer());
-=======
-    protected static void requireNetworkWithoutDriver()
-    {
-        startServices();
-        startServer(server -> {});
->>>>>>>
     }
 
     // lazy initialization for all tests that require Java Driver
@@ -521,48 +505,7 @@
 
     private static void initializeNetwork(Consumer<Server.Builder> decorator, Consumer<Cluster.Builder> clusterConfigurator)
     {
-<<<<<<<
-        Server.Builder serverBuilder = new Server.Builder().withHost(nativeAddr).withPort(nativePort);
-        decorator.accept(serverBuilder);
-        server = serverBuilder.build();
-        ClientMetrics.instance.init(Collections.singleton(server));
-        server.start();
-=======
         startServer(decorator);
-
-        for (ProtocolVersion version : PROTOCOL_VERSIONS)
-        {
-            if (clusters.containsKey(version))
-                continue;
-
-            SocketOptions socketOptions = new SocketOptions()
-                                          .setConnectTimeoutMillis(Integer.getInteger("cassandra.test.driver.connection_timeout_ms", DEFAULT_CONNECT_TIMEOUT_MILLIS)) // default is 5000
-                                          .setReadTimeoutMillis(Integer.getInteger("cassandra.test.driver.read_timeout_ms", DEFAULT_READ_TIMEOUT_MILLIS)); // default is 12000
-
-            logger.info("Timeouts: {} / {}", socketOptions.getConnectTimeoutMillis(), socketOptions.getReadTimeoutMillis());
-
-            Cluster.Builder builder = Cluster.builder()
-                                             .withoutJMXReporting()
-                                             .addContactPoints(nativeAddr)
-                                             .withClusterName("Test Cluster")
-                                             .withPort(nativePort)
-                                             .withSocketOptions(socketOptions);
-
-            if (clusterConfigurator != null)
-                clusterConfigurator.accept(builder);
-
-            if (version.isBeta())
-                builder = builder.allowBetaProtocolVersion();
-            else
-                builder = builder.withProtocolVersion(com.datastax.driver.core.ProtocolVersion.fromInt(version.asInt()));
-
-            Cluster cluster = builder.build();
-            clusters.put(version, cluster);
-            sessions.put(version, cluster.connect());
-
-            logger.info("Started Java Driver instance for protocol version {}", version);
-        }
->>>>>>>
     }
 
     private static void startServer(Consumer<Server.Builder> decorator)
@@ -1207,11 +1150,18 @@
 
     public static Cluster.Builder clusterBuilder()
     {
+        SocketOptions socketOptions = new SocketOptions()
+            .setConnectTimeoutMillis(Integer.getInteger("cassandra.test.driver.connection_timeout_ms", DEFAULT_CONNECT_TIMEOUT_MILLIS)) // default is 5000
+            .setReadTimeoutMillis(Integer.getInteger("cassandra.test.driver.read_timeout_ms", DEFAULT_READ_TIMEOUT_MILLIS)); // default is 12000
+
+        logger.info("Timeouts: {} / {}", socketOptions.getConnectTimeoutMillis(), socketOptions.getReadTimeoutMillis());
+
         return Cluster.builder()
                       .addContactPoints(nativeAddr)
                       .withPort(nativePort)
                       .withClusterName("Test Cluster")
-                      .withoutJMXReporting();
+                      .withoutJMXReporting()
+                      .withSocketOptions(socketOptions);
     }
 
     protected SimpleClient newSimpleClient(ProtocolVersion version) throws IOException
--- a/test/unit/org/apache/cassandra/cql3/ViewSchemaTest.java
+++ b/test/unit/org/apache/cassandra/cql3/ViewSchemaTest.java
@@ -42,12 +42,8 @@
 import org.apache.cassandra.db.SystemKeyspace;
 import org.apache.cassandra.schema.ColumnMetadata;
 import org.apache.cassandra.schema.Schema;
-<<<<<<<
 import org.apache.cassandra.exceptions.InvalidRequestException;
-import org.apache.cassandra.db.SystemKeyspace;
-=======
 import org.apache.cassandra.schema.TableMetadata;
->>>>>>>
 import org.apache.cassandra.serializers.SimpleDateSerializer;
 import org.apache.cassandra.serializers.TimeSerializer;
 import org.apache.cassandra.transport.ProtocolVersion;
