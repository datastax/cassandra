min_version: "5.17.3"

description: |
  A workload which reads ann-benchmarks vector data from HDF5 file format.

scenarios:
  default:
    schema: run driver=cql tags==block:schema threads==1 cycles==UNDEF
    rampup: run driver=cql tags==block:rampup cycles===TEMPLATE(rampup-cycles,10000000) threads=100
    main: run driver=cql tags=='block:main.*' cycles===TEMPLATE(main-cycles,10000000) threads=5
  drop-tables:
    schema: run driver=cql tags==block:drop-tables threads==1 cycles==UNDEF
  truncate: run driver=cql tags==block:truncate-tables cycles===1 threads=1
  reads: run driver=cql tags==block:main-read cycles===TEMPLATE(main-cycles,10000000) threads=auto

bindings:
  rw_key: ToString()
  train_vector: HdfFileToFloatArray("TEMPLATE(hdf5_path)", "/train") ; ToCqlVector()
  test_vector: HdfFileToFloatArray("TEMPLATE(hdf5_path)", "/test") ; ToCqlVector()
  validation_set: HdfFileToIntArray("TEMPLATE(hdf5_path)", "/neighbors")

ops:
  vop1:
    stmt: "number:{number} name:{number_name}\n"
    verifier-imports:
      - "io.nosqlbench.api.engine.metrics.ActivityMetrics"
    verifier-init: |
      recallHisto = ActivityMetrics.histogram(_parsed_op,"recall-histo",4);
    verifier: |
      // double recall = vectormath.computeRecall(result,result)
      recallHisto.update(cycle);
      return true;

blocks:
  schema:
    params:
      cl: TEMPLATE(cl,LOCAL_QUORUM)
      prepared: false
    statements:
      - create-keyspace: |-
          CREATE KEYSPACE IF NOT EXISTS TEMPLATE(keyspace,vector_test)
          WITH replication = {'class': 'NetworkTopologyStrategy', 'europe-west4': '3'};
      - create-table: |-
          CREATE TABLE IF NOT EXISTS TEMPLATE(keyspace,vector_test).TEMPLATE(table,vectors) (
            key TEXT,
            value vector<float,<<dimensions:65>>>,
            PRIMARY KEY (key)
          );
      - create-sai-index: |-
          CREATE CUSTOM INDEX IF NOT EXISTS ON TEMPLATE(keyspace,vector_test).TEMPLATE(table,vectors) (value) USING 'StorageAttachedIndex'
          WITH OPTIONS = {'maximum_node_connections' : TEMPLATE(M,16), 'construction_beam_width' : TEMPLATE(ef,100), 'similarity_function' : 'TEMPLATE(similarity_function,dot_product)'};

  reset-schema:
    params:
      cl: TEMPLATE(cl,LOCAL_QUORUM)
      prepared: false
    statements:
      drop-index: |-
        DROP INDEX IF EXISTS TEMPLATE(keyspace, vector_test).TEMPLATE(table,vectors)_value_idx;
      drop-table: |-
        DROP TABLE IF EXISTS TEMPLATE(keyspace,vector_test).TEMPLATE(table,vectors);

  rampup:
    params:
      cl: TEMPLATE(write_cl,LOCAL_QUORUM)
      prepared: true
    statements:
      - rampup-insert: |-
          INSERT INTO TEMPLATE(keyspace,vector_test).TEMPLATE(table,vectors)
          (key, value) VALUES ({rw_key},{train_vector});

  main-read:
    params:
      ratio: TEMPLATE(read_ratio,90)
      cl: TEMPLATE(read_cl,LOCAL_QUORUM)
      instrument: true
      prepared: true
    statements:
      - main-select-ann-limit:
          stmt: |
            SELECT * FROM TEMPLATE(keyspace,vector_test).TEMPLATE(table,vectors) ORDER BY value ANN OF {test_vector} LIMIT TEMPLATE(select_limit,100);
          verifier-imports:
            - "io.nosqlbench.engine.extensions.vectormath.Intersections"
          verifier-init: |
              summaryGauge=io.nosqlbench.api.engine.metrics.ActivityMetrics.summaryGauge(_parsed_op,"recall_intersect");
          verifier: |
              ann = vectormath.stringArrayAsIntArray(vectormath.rowFieldsToStringArray("key",result));
              knn = {validation_set};
            
              Arrays.sort(ann);
              Arrays.sort(knn);
              
              intersection = Intersections.count(ann, knn);
              recall = (double)intersection/(double)knn.length;
              summaryGauge.accept(recall);
              return true;

  main-write:
    params:
      ratio: TEMPLATE(write_ratio,10)
      cl: TEMPLATE(write_cl,LOCAL_QUORUM)
      instrument: true
      prepared: true
    statements:
      - main-insert: |-
          INSERT INTO TEMPLATE(keyspace,vector_test).TEMPLATE(table,vectors)
          (key, value) VALUES ({rw_key}, {train_data});
